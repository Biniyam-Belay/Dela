// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Define the datasource (your PostgreSQL connection)
// Make sure the DATABASE_URL is set in your .env file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the Prisma Client generator
generator client {
  provider = "prisma-client-js"
}

// --- Models ---

model User {
  id        String   @id @default(cuid()) // Using CUIDs for IDs is often a good practice
  email     String   @unique
  name      String? // Optional name
  password  String   // Will store the hashed password
  role      Role     @default(USER) // User roles (USER or ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addresses Address[] // User can have multiple addresses
  orders    Order[]   // User can have multiple orders
  cart      Cart?     // User has one cart (one-to-one)

  @@map("users") // Explicitly map to 'users' table (optional but good practice)
}

enum Role {
  USER
  ADMIN
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Link to user, Cascade means delete addresses if user is deleted
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean  @default(false) // Maybe track default shipping/billing, or handle this logic elsewhere
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Add indexes if you query addresses often without userId
  @@index([userId])
  @@map("addresses")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique // Category names should be unique
  slug        String    @unique // URL-friendly slug for category pages
  description String?
  products    Product[] // Category can have multiple products
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id            String       @id @default(cuid())
  name          String
  slug          String       @unique // URL-friendly slug for product pages
  description   String
  price         Decimal      @db.Decimal(10, 2) // Use Decimal for currency (10 total digits, 2 after decimal)
  stockQuantity Int          @default(0)
  images        String[]     // Store an array of image URLs/paths
  categoryId    String?      // Optional: Product might not belong to a category initially
  category      Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull) // Link to category, SetNull if category deleted
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  orderItems    OrderItem[] // Product can be in multiple order items
  cartItems     CartItem[]  // Product can be in multiple cart items

  // Add indexes for common filtering/searching
  @@index([categoryId])
  @@index([name]) // If searching by name often
  @@map("products")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique // Each user has only one cart
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade) // Link to user
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[] // Cart contains multiple items

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade) // Link to cart
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade) // Link to product (Cascade: remove item if product is deleted)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ensure a product appears only once per cart (quantity handles multiples)
  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
  @@map("cart_items")
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Restrict) // Link to user (Restrict: prevent deleting user if they have orders)
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal     @db.Decimal(10, 2)
  shippingAddress Json        // Store shipping address snapshot at time of order
  billingAddress  Json?       // Optional, could be same as shipping
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  items           OrderItem[] // Order contains multiple items

  // Index for fetching user orders or filtering by status
  @@index([userId])
  @@index([status])
  @@map("orders")
}

enum OrderStatus {
  PENDING     // Order placed, awaiting payment confirmation or processing
  PROCESSING  // Payment received, order is being processed
  SHIPPED     // Order has been shipped
  DELIVERED   // Order has been delivered
  CANCELLED   // Order was cancelled
  FAILED      // Payment failed or other issue
}

model OrderItem {
  id             String   @id @default(cuid())
  orderId        String
  order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade) // Link to order
  productId      String
  product        Product  @relation(fields: [productId], references: [id], onDelete: Restrict) // Link to product (Restrict: prevent deleting product if it's in orders)
  quantity       Int
  priceAtPurchase Decimal  @db.Decimal(10, 2) // Store the price *at the time of purchase*
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}